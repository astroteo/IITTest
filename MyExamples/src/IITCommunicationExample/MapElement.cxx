// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MapElement.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "MapElement.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MapElement::MapElement()
{
    // m_key com.eprosima.idl.parser.typecode.StringTypeCode@76a3e297
    m_key ="";
    // m_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4d3167f4
    m_value = 0.0;
    // m_tstamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@ed9d034
    m_tstamp = 0.0;

}

MapElement::~MapElement()
{



}

MapElement::MapElement(const MapElement &x)
{
    m_key = x.m_key;
    m_value = x.m_value;
    m_tstamp = x.m_tstamp;
}

MapElement::MapElement(MapElement &&x)
{
    m_key = std::move(x.m_key);
    m_value = x.m_value;
    m_tstamp = x.m_tstamp;
}

MapElement& MapElement::operator=(const MapElement &x)
{

    m_key = x.m_key;
    m_value = x.m_value;
    m_tstamp = x.m_tstamp;

    return *this;
}

MapElement& MapElement::operator=(MapElement &&x)
{

    m_key = std::move(x.m_key);
    m_value = x.m_value;
    m_tstamp = x.m_tstamp;

    return *this;
}

size_t MapElement::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t MapElement::getCdrSerializedSize(const MapElement& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.key().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void MapElement::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_key;
    scdr << m_value;
    scdr << m_tstamp;
}

void MapElement::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_key;
    dcdr >> m_value;
    dcdr >> m_tstamp;
}

/*!
 * @brief This function copies the value in member key
 * @param _key New value to be copied in member key
 */
void MapElement::key(const std::string &_key)
{
m_key = _key;
}

/*!
 * @brief This function moves the value in member key
 * @param _key New value to be moved in member key
 */
void MapElement::key(std::string &&_key)
{
m_key = std::move(_key);
}

/*!
 * @brief This function returns a constant reference to member key
 * @return Constant reference to member key
 */
const std::string& MapElement::key() const
{
    return m_key;
}

/*!
 * @brief This function returns a reference to member key
 * @return Reference to member key
 */
std::string& MapElement::key()
{
    return m_key;
}
/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void MapElement::value(double _value)
{
m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
double MapElement::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
double& MapElement::value()
{
    return m_value;
}

/*!
 * @brief This function sets a value in member tstamp
 * @param _tstamp New value for member tstamp
 */
void MapElement::tstamp(double _tstamp)
{
m_tstamp = _tstamp;
}

/*!
 * @brief This function returns the value of member tstamp
 * @return Value of member tstamp
 */
double MapElement::tstamp() const
{
    return m_tstamp;
}

/*!
 * @brief This function returns a reference to member tstamp
 * @return Reference to member tstamp
 */
double& MapElement::tstamp()
{
    return m_tstamp;
}


size_t MapElement::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool MapElement::isKeyDefined()
{
   return false;
}

void MapElement::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
}
